January 6th 2013
	It's weird how these things pan out. Maybe I'm just a tangential programmer? Anyway what started as work on the joystick stuff has fed in to what is now the Cue system and the Lua based persistence - the saving stuff. So hopefully by the end of the day we might have this message passing stuff done in a way that's useful and either saving or keys. X) Go with the flow Atkinson ;)

January 5th 2013
	So the basic key framework is in. What I intend to do is add a basic key listening class which I will use to configure the button presses - I think =) Keyboard and Joypad. I've never done Joypad before so this'll be interesting. I'm thinking the listening will be a massive pain in the arse, as when listening for the first key it'll have to decide whether we're using keyboard or mouse. Unless I can think of an easy way to dumb it down. We'll see...

	Just been thinking that this message passing system, which I've called the Cue system, might be a wise option for actually throwing about the button presses and the like. =) S'wicked!

January 4th 2013
	Right, so going to have to get on with these Buckets. First I want to get the basic event handling framework in there. Player - which is the input (and can probably be partially nicked from lime) and Stage which is the output. The player module will be designed in such a way that the input is only gleaned from a handful of buttons. I don't want to use SDL directly once this system is written. Each button will be like UP, DOWN, LEFT, RIGHT, A, B, X, Y, L, R, start and select. Which is the SNES/DS buttons. The buttons can either be keyboard or joystick. At present wart doesn't use the mouse, nor do I intend it to.

	Castmember Player {
		bool isPressed();
		Tag update();
	private:
		bool UP, DOWN, LEFT, RIGHT, A, B, X, Y, L, R, START, SELECT; 
	}

	update() {
		If being killed then WRAP
		Get keys/buttons
		Update key/button states
	}

	I could do this the lime way so that when a button is pressed a Castmember is pushed to the front of the stack. It kinda sorta simplifies the implementation, and keeps it pretty hackable. But then again that might be a little too complicated. In lime where the interface was two buttons and you had to be hovering over what you were interacting with this approach was decent - but here buttons need different contexts and perhaps if the Actor or Castmember was listening for the press.

	Another additional thing I want is the broadcast stack/queue. A way of passing simple messages along the stack. So if a GAME_PAUSED message is emitted the Castmember might stop. Or so a powerup is picked up which destroys all enemies so Actors listen for a "DESTROY_ALL_ENEMIES" message. It's a way of keeping state encapsulated without declaring too many variables - I reckon. This simple message passing mechanism avoids the... what should I call it? Loosewires of using variables, a good chunk of this endeavour is an exercise in insulation, to provide me with the means to describe fat globs of game, fat globs that don't intrude on eachothers' space.

	Well actions speak louder than words, I best get this Player module in.

January 1st 2013
	Currently adding Lua to the mix, my plans for Lua are using it for persistence (plain text save files, pretty fucking hackable) and Scene configuartion files. My desire for Actors and Castmembers is for me to be able to write either in C or Lua. Again this is so the game state is pretty fucking hackable, I want to be able to add things on the fly or if speed is a concern write it in C. I keep calling it C but I do mean C++.

	Ideally I don't want to think about the resources too much, I want to slap in some almost intangible means of allocating the resources. Simply by setting a string in the right node and then if that string is loaded in the bucket we look for that resource and allocate it. But by that definition when all the things leeching off that resource decide they're not using it anymore I have to think of a way to garbage collect it. I think Actors and Castmembers will have to be explicitly popped off the stack. Or maybe resources should be pulled in by Scene, so things are deallocated only when a Scene changes. That actually makes a lot of sense and is the way I'm currently doing it in lime. Yeah I'm happy with that, since why would a game need to be able to pull shit in and out that rapidly. Perhaps resources could be tagged, so that shifts in resource can be nested within Scenes. Something like that aye...

	This is contrary to the fact that I wanted resource allocation to be transparent and you just use the resources. But that'll be a major pain in the arse so it's wise to have explicit allocation and deallocation.

	Bucket::Image(context tag, list of image names);

	I don't think nested Buckets are a good idea.

	Bucket {
		tag = "castle",
		sounds {
			"fanfare.ogg", "laugh.ogg", "bgm.ogg"
		},
		images {
			"king.png", "throne.png", "fop.png"
		}
	}

	The BucketManager, ResourceManager, EffectsGuy whatever we wind up calling it will allocate a resource and keep tabs on which resources need keeping and which need tipping away? Maybe this idea with contexts is a little too rich. Between Scenes is ample time to pull shit in and everything is done at once. No I'm thinking about the contexts wrong... A global context would house all the interscene resources, for instance the player Graphic and the HUD, then there'd be a Bucket called Scene which holds all the Scene related gear and then other buckets with resources defined for another span/scope will be defined. So bucket{scene, sounds, images} would swap out all the graphics? NO SWAPPING OUT OF GRAPHICS, IF YOU WANT INTERSCENE RESOURCES YOU STICK THEM IN A SEPARATE BUCKET. CAPICHE?! Behind the BucketManager should keep tabs on who has it, and which buckets have it and once all the buckets don't hold that resource it is finally freed. Keep reinventing the wheel Atkinson - pal. ;D

Back in November:
Write Bucket
	resource managers, image and sound
	use reference counting
Write Stage
	class encapsulating visual and aural output 
	might define Actor type here
Write Player
	half of this can be nicked from lime
	where do I draw the line between SDL and wart? 
